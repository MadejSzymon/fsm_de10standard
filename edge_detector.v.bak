
// edgeDetector.v
// Moore and Mealy Implementation

module edge_detector
(
    input wire clk, 
    input wire level, 
    output reg Mealy_tick
);

initial 
begin
	Mealy_tick <= 0;
	stateMealy_reg <= 1;
	stateMealy_next <= 1;
end
	
localparam  // 2 states are required for Mealy
    zeroMealy = 1'b0,
    oneMealy =  1'b1;

reg stateMealy_reg, stateMealy_next; 

always @(posedge clk)
begin
        stateMealy_reg <= stateMealy_next;
end

// Mealy Design 
always @(stateMealy_reg, level)
begin
    // store current state as next
    stateMealy_next = stateMealy_reg; // required: when no case statement is satisfied
    
    Mealy_tick = 1'b0; // set tick to zero (so that 'tick = 1' is available for 1 cycle only)
    case(stateMealy_reg)
        zeroMealy: // set 'tick = 1' if state = zero and level = '1'
            if(level)  
                begin // if level is 1, then go to state one,
                    stateMealy_next = oneMealy; // otherwise remain in same state.
                    Mealy_tick = 1'b1;
                end
        oneMealy: 
            if(~level) // if level is 0, then go to zero state,
                stateMealy_next = zeroMealy; // otherwise remain in one state.
    endcase
end
endmodule